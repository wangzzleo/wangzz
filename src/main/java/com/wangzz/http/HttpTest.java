package com.wangzz.http;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import lombok.Data;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HttpContext;

import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.net.SocketTimeoutException;
import java.time.LocalDate;
import java.util.*;
import java.util.concurrent.*;

public class HttpTest {
    public static void main(String[] args) {


        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat("demo-pool-%d").build();
        ExecutorService service = new ThreadPoolExecutor(10, 10, 1000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), threadFactory);

        List<String> strings = Arrays.asList("6215983760009144054", "6217003210012930612", "6236683240002099281", "6236683100001845235", "6236683240002099281", "6217003090011005958", "6217003260002570209", "6217003090011005958", "6217001830032938600", "6217001830032938600", "6217001830032938600", "6222020403020432510", "6227003101360048694", "6217001830032938600", "6227003101360048694", "6217001850015190227", "6227003101360048694", "6236681830001942960", "6217003260002570209", "6236681830001942960", "6217001820027194137", "6227003101360048694", "6236681880000571138", "6217001820027194137", "6236681880000571138", "6217001820027194137", "6236681880000571138", "6217001820027194137", "6217003090011005958", "6217002870051529509", "6236681880000571138", "6217002980101548621", "6217001820004887398", "6217001830032159272", "6217003200004639370", "6217001830032159272", "6227003101360048694", "6236681880000571138", "6217002870029775341", "6217002670008789556", "6217002980101548621", "6217001830032159272", "6217002930101219483", "6236683150000524679", "6217001830032159272", "6236683320009485293", "6217001820027194137", "6217001830032159272", "6217002670008789556", "6217002930101219483", "6236681540008216199", "6217003260002570209", "6236683000001480159", "6236683320009485293", "6217002670008789556", "6236681540008216199", "6232111890000707359", "6236683240002099281", "6217002550002735252", "6217002210014781030", "6236681540018177522", "6217002340023170048", "6217001820027194137", "6227003101360048694", "6217001830032159272", "6217000190006737020", "6227000210070147598", "6217001820027194137", "6217002980101548621", "6217001430012373553", "6217002870001643632", "6236681270001777860", "6222803324851007341", "6227003180040078164", "6236681270001777860", "6217003810001386195", "6217001240006735513", "6236682920002165395", "6217000190006737020", "6217003810001386195", "6236683110005293902", "6217002870001643632", "6217002740027297889", "6217001240006735513", "6217002870005102734", "6217002490005816447", "6217001850002780394", "6217002490005816447", "6217002870005102734", "6217002340023170048", "6217001830032159272", "6217001830032159272", "6227002201433815896", "6217002490005816447", "6217001450005512868", "6217001830032159272", "6217003810001386195", "6217001830032159272", "6217001240012032988", "6217002340023170048", "6217003810001386195", "6236683000001480159", "6236683110005293902", "6236683000001480159", "6217001830032159272", "6227001273650062685", "6217001450005512868", "6217001240012032988", "6217002930101219483", "6217002570008532529", "6217003810082773865", "6217002570008532529", "6217002920108533879", "6217001250007419736", "6217003090005220407", "6217003090011005958", "6217002970106056647", "6227000183010760418", "6236683320007603533", "6227001833630314074", "6227003101360048694", "6217003090005220407", "6236681480011747825", "6236683320007603533", "6217001250007419736", "6217001830032512017", "6217001830032512017", "6236681480011747825", "6217003090005220407", "6217001830032512017", "6232111890000707359", "6236683320007603533", "6236681480011747825", "6236683110005293902", "6236683000001480159", "6217003020110031670", "6236683000001480159", "6217000110017051625", "6217001270017310774", "6236683110005293902", "6217003250000119901", "6217002920123405277", "6217001830032512017", "6217000110017051625", "6236681830001942960", "6217003250000119901", "6217002280002956795", "6227000183010760418", "6217002280002956795", "6217003630003979676", "6217002280002956795", "6217003630003979676", "6227000183010760418", "6217001450001757657", "6217001450001757657", "6217001540002589123", "6217003090011005958", "6217003810018897929", "6232111890000707359", "6217002730006126225", "6217001280606717404", "6217001830032159272", "6217001280606717404", "6217002730006126225", "6217001280606717404", "6217001280606717404", "6217003120013355711", "6217002970107694214", "6217002730006126225", "6236683110005293902", "6236681540005210641", "6236681540005210641", "6217002670003882141", "6227002920110929023", "6227001277511558187", "6217003130009319233", "6227001277511558187", "6217003130009319233", "6236681540005210641", "6236681540008216199", "6217002730006126225", "6217001330013035781", "6217002920125962549", "6217001450005512868", "6227001277511558187", "6217002920125962549", "6217001330013035781", "6217002440001721620", "6217000180013521715", "6217002440001721620", "6217001480000531258", "6217001480000531258", "6217003130009319233", "6217001430007513346", "6217001430007513346", "6217003810054294510", "6217000110015167191", "6217000110015167191", "6217001430007513346", "6217003810054294510", "6217001820037021585", "6217002920123405277", "6217001270016249817", "6217003250000119901", "6217001430007513346", "6217002730006126225", "6217001270016249817", "6217002870061106777", "6217003810054294510", "6217001480000531258", "6217001430007513346", "6217001270016249817", "6217001820037021585", "6217002870061106777", "6227002590450461935", "6217001270016249817", "6217001820037021585", "6217001820037021585", "6217002300000516795", "6236682960002071037", "6217003810054294510", "6217003810054294510", "6217003570001675779", "6236683100001845235", "6236682920003602990", "6230942920001056040", "6210812831000227707", "6217001450005512868", "6236682920003602990", "6210812831000227707", "6236683100001845235", "6217002920136677672", "6217993300088453011", "6217001820007097516", "6217002870085046009", "6217003610002662762", "6217001820007097516", "6210812831000227707", "6236681310001335960", "6222801426041009426", "6217000140024906032", "6217002870085046009", "6236681310001335960", "6217002930104214796", "6236680140000317870", "6217002930104214796", "6217002280002784825", "6236682980001210196", "6222801426041009426", "6236681370001204699", "6217003810013774917", "6227003101360048694", "6236682980001210196", "6236683240002099281", "6217002290003515573", "6217001270016249817", "6236682980001210196", "6217003740000264657", "6217001540003740519", "6236681370001204699", "6236680140000317870", "6232111870000878335", "6217003740000264657", "6236682980001210196", "6217002290003515573", "6236681370001204699", "6214661830125892", "6210812831000227707", "6236682980001210196", "6217001820007097516", "6217000140014024663", "6217003210012930612", "6236682980001210196", "6217003740000058836", "6217001460005456909", "6217003600001335494", "6236683170003417424", "6217000130024054677", "6217003320043603698", "6217000180039070473", "6217003600001335494", "6236683170003417424", "6217003320043603698", "6217001850005825782", "6217002870036086914", "6217002980101548621", "6217002870036086914", "6217002830002099663", "6217003320021615896", "6217001460005456909", "6217003600001335494", "6227002731800539877", "6232111870000878335", "6217001820007097516", "6217002830002099663", "6217002870036086914", "6217001210079769426", "6217000180013521715", "6217002920123405277", "6217002870085046009", "6217000210007146706", "6217001210079769426", "6222801426041009426", "6227003812270236308", "6217003600001335494", "6217003630003979676", "6217000210007146706", "6217001210079769426", "6217002920134313874", "6217003680004472684", "6217003680004472684", "6217002730006126225", "6236684220008470016", "6217002980101548621", "6217002930102182441", "6217002340023170048", "6217001430008814644", "6217003600001335494", "6217993300088453011", "6217000130059394949", "6210812450001041304", "6217001820007097516", "6217003860018310514", "6210812450001041304", "6217003860018310514", "6230943050000145435", "6227003812270236308", "6217001460005456909", "6217001430012373553", "6217002340023170048", "6217001430003257773", "6217001430012373553", "6227003101360048694", "6217003680004472684", "6217001430012373553", "6217000210007146706", "6217001430012373553", "6236684220008470016", "6217003250000119901", "6217002430016395676", "6217001240002436140", "6217002920118844712", "6217000110015167191", "6217003810044549783", "6217003810044549783", "6217002430016395676", "6217000180013521715", "6227003101360048694", "6217001240002436140", "6217001430003257773", "6217002200017640598", "6217001460005456909", "6217001240002436140", "6217001540002589123", "6217002200017640598", "6236682960002940389", "6217002160014879518", "6236682960002940389", "6217002200017640598", "6217002160014879518", "6227002731800539877", "6217001240002436140", "6236683100001845235", "6217004190001352953", "6217000180013521715", "6217002990107205878", "6217004190001352953", "6217000140022019028", "6236682960002940389", "6217004190001352953", "6217002990107205878", "6217000140022019028", "6236683100001845235", "6236680610001807491", "6217001830032159272", "6217001650002777170", "6227007200100187402", "6217001270006916557", "6236680610001807491", "6217001650002777170", "6222801426041009426", "6217000140022019028", "6217002160014879518", "6217002930102182441", "6227007200100187402", "6236680610001807491", "6217001270006916557", "6217003090021427648", "6217001240002436140", "6236681540015795409", "6217002480004146128", "6217003090021427648", "6236683100001845235", "6217003090021427648", "6230943050000145435", "6217003130009319233", "6217001340006435922", "6227001832990195826", "6217001250019066608", "6217003680004472684", "6217002730006126225", "6217001340006435922", "6217003800019820830", "6217000140022019028", "6217001270006916557", "6236681540015795409", "6217001340006435922", "6217001270006916557", "6217001240002436140", "6236680610001807491", "6217002730006126225", "6217001270006916557", "6217002480004146128", "6236681880000571138", "6217001270006916557", "6217002990107205878", "6217003010101301109", "6217001460005456909", "6227004165040449571", "6227000010380435521", "6217003810044882242", "6222803100251007234", "6217003810044882242", "6236681830003343696", "6227004165040449571", "6217003860018310514", "6236684220008470016", "6217002970106056647", "6217001270006916557", "6236681370001204699", "6222803100251007234", "6217002590011471499", "6227004165040449571", "6227002590450461935", "6217001250019066608", "6217001240002436140", "6236681880000571138", "6230943600000080212", "6217001250019066608", "6236681650000970303", "6222803100251007234", "6217002590011471499", "6227000731340016321", "6227002212013698248", "6217002670008789556", "6227002212013698248", "6230943600000080212", "6217001250019066608", "6217001270002090464", "6217002920128882371", "6236681880000571138", "6210812450000995849", "6215983760005015951", "6217002870069113684", "6217004160019085911", "6222803100251007234", "6217001830032512017", "6217001210027874401", "6227003101360048694", "6227001272570077302", "6217002920118844712", "6217002870069113684", "6212841491010050010", "6227001272570077302", "6210812450000995849", "6236680610001622064", "6212841491010050010", "6217002340004749273", "6217001250019066608", "6217002200006013757", "6217003740000058836", "6227002212013698248", "6217001330013035781", "6217002920108533879", "6217003200004639370", "6217002340004749273", "6210812450000995849", "6217002550003081565", "6236683050000854755", "6236681460007726967", "6227001272570077302", "6217004160019085911", "6217001240028510134", "6236681880000571138", "6236681460007726967", "6217001140054995433", "6217001820011778796", "6217001250019066608", "6227003812180726380", "6217001240028510134", "6210812450000995849", "6217001310011427610", "6217001140054995433", "6227001272570077302", "6217002970105849125", "6217004160019085911", "6217002550003081565", "6217002970105849125", "6227002453260097680", "6217001310011427610", "6227001272570077302", "6217002970105849125", "6217001140054995433", "6217001340006435922", "6227002212013698248", "6212841491010050010", "6217004220010604894", "6217003130008736486", "6230943600000080212", "6217004220010604894", "6217001270016249817", "6217003130008736486", "6227002453260097680", "6217002920134313874", "6236682670003215976", "6227002731800539877", "6217002430012585726", "6236683860003318537", "6217002920134313874", "6236680610001622064", "6227001272570077302", "6217001340006435922", "6217001370032731366", "6236680610001622064", "6227001272570077302", "6232111890000707359", "6217001460005456909", "6217001370032731366", "6227001486050196008", "6217002340004749273", "6227000731340016321", "6217001140034739984", "6227001272570077302", "6217003760104172689", "6217001140034739984", "6217000210007146706", "6236681370001204699", "6227001274700084943", "6236683160000600049", "6227001486050196008", "6217001370047240106", "6227001274700084943", "6217001240002436140", "6217001370047240106", "6210812450000995849", "6236682670003215976", "6217003170018053688", "6217001370047240106", "6227003101360048694", "6217001240002436140", "6227002920110929023", "6210810650001942615", "6217001210086867593", "6217002340004749273", "6217002970105849125", "6217002920118482869", "6227001833630314074", "6236683160000600049", "6217002340004749273", "6210810650001942615", "6217002920118482869", "6227003101360048694", "6217002990107205878", "6217001370047240106", "6217001830038562347", "6217004190001352953", "6217001540019066503", "6227001833630314074", "6217001370047240106", "6236683160000600049", "6217004260010927085", "6217001540019066503", "6217007150001998285", "6236682960002940389", "6236680610001622064", "6217000130023476590", "6217001630036981147", "6217004260010927085", "6227001274700084943", "6210812430038005233", "6236680610001807491", "6217001240002436140", "6210812430038005233", "6217000130023476590", "6217002340004749273", "6236680690001758290", "6217000360000217598", "6217001540019066503", "6217003020110031670", "6217007150001998285", "6217000460003613437", "6217000360000217598", "6217000130023476590", "6210812430038005233", "6217002720007436665", "6217000460003613437", "6236680690001758290", "6236680610001622064", "6227003101360048694", "6217001630036981147", "6217003740000058836", "6217003090011005958", "6228480316161657762", "6217001440004659935", "6217002720007436665", "6217000360000217598", "6210812430038005233", "6217001460005456909", "6217003660003837004", "6227001274700084943", "6236683160000600049", "6217004260010927085", "6217000010018726144", "6217000010147871886", "6217001440004659935", "6217000360000217598", "6236681880000571138", "6222802214211744819", "6210812430038005233", "6217000180013521715", "6217001240002436140", "6236681880000571138", "6217004260010927085", "6210810730039906905", "6217002720007436665", "6217001440004659935", "6217003960004560971", "6210812430038005233", "6217002200006013757", "6227002920110929023", "6217002720007436665", "6217000360000217598", "6217003160004392026", "6217000610000425603", "6212841491010050010", "6217002440008780710", "6217002920134313874", "6227002920110929023", "6217000010018726144", "6217001210063190852", "6217001180012928746", "6217000010018726144", "6217003170018053688", "6217003860018310514", "6217002340004749273", "6217007200075830094", "6217004220051546210", "6217000300005037088", "6217001210063190852", "6217007200075830094", "6217007200075830094", "6210810830004399423", "6210812450000995849", "6217002670001219510", "6217003170018053688", "6217003250000119901", "6217004220051546210", "6236681650001974718", "6217000010018726144", "6217001210063190852", "6217000300005037088", "6217001440004659935", "6217001830032512017", "6217001850005825782", "6210810730015237713", "6217003660003837004", "6210810730015237713", "6236681650001974718", "6236681930008861294", "6217002440008780710", "6217003850004412747", "6236681650001974718", "6217002440008780710", "6236681930008861294", "6217002440008780710", "6217003150004752162", "6217002440008780710", "6217000180039070473", "6217002440008780710", "6217002970105849125", "6236681930008861294", "6236681880000571138", "6227000731340016321", "6217000360000217598", "6236681930008861294", "6217002570008532529", "6217003850004412747", "6217000580002590094", "6236682000027611598", "6236681880000571138", "6210810620001720923", "6217000580002590094", "6217000010018726144", "6217003660003837004", "6217000210007146706", "6236681420009147877", "6217001300003307854", "6217001140015576736", "6217001300003307854", "6210810830004399423", "6236681420009147877", "6227003811950390096", "6236682000027611598", "6227001853110007972", "6217003850004412747", "6217001140015576736", "6217001300003307854", "6217001430005273927", "6217003040105951666", "6217001460005456909", "6217002200016641316", "6214672670000477941", "6217002200016641316", "6222801426041009426", "6217007200075830094", "6217002640008480134", "6217001300003307854", "6217001270014736864", "6236681830004414470", "6217002640008480134", "6217000140007950445", "6210810730015237713", "6217002720007436665", "6217001300003307854", "6236681830004414470", "6217003860018310514", "6217000140007950445", "6236684220008470016", "6217001820020114090", "6217001820020114090", "6217002720007436665", "6217000300003098082", "6217000410006559673", "6217001820020114090", "6217002300004867913", "6217002930104214796", "6217002300004867913", "6230942950000011902", "6217002920108533879", "6214672670000477941", "6210810620001720923", "6217000300003098082", "6217001300003307854", "6230942950000011902", "6217002200016641316", "6217001260008161179", "6217001450005512868", "6217001260008161179");

//        for (String cardNo:strings) {
//            service.execute(() -> {
        String s = HttpClientUtilOld.get("https://ccdcapi.alipay.com/validateAndCacheCardInfo.json?cardNo=" + "&cardBinCheck=true");
        Map map = JSON.parseObject(s, Map.class);
        System.out.println(map.get("bank"));
//            });
//        }

//        while (service.isTerminated()) {
//            return;
//
//
//        ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat("demo-pool-%d").build();
//        ExecutorService service = new ThreadPoolExecutor(10, 10, 1000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), threadFactory);
//
//
//        for (int i = 0; i < 800; i++) {
//            PaymentOrderDTO paymentOrderDTO = new PaymentOrderDTO();
//            if (i%3 == 1) {
//                paymentOrderDTO.setCustAccount("11010219721601");
//                paymentOrderDTO.setAccountName("平安测试六零零零三四一五八六二六");
//            } else if (i%3 == 2) {
//                paymentOrderDTO.setCustAccount("6230580000054508325");
//                paymentOrderDTO.setAccountName("平安测试七八八零六");
//            } else {
//                paymentOrderDTO.setCustAccount("6230580000074308748");
//                paymentOrderDTO.setAccountName("平安测试三四六五九");
//            }
//            paymentOrderDTO.setContractId("CH2019101088" + i);
//            Runnable httpClientTestThread = new HttpClientTestThread(paymentOrderDTO);
//            service.execute(httpClientTestThread);
//        }
//
//        while (service.isTerminated()) {
//            return;
//        }
            String url = "https://www.baidu.com";
            try {
                String res = HttpClientUtilOld.sendGetSSLRequest(url, "UTF-8");
                System.out.println(res);
            } catch (Exception e) {
                e.printStackTrace();
            }
//        }
        String url1 = "https://www.baidu.com";
        try {
            String res = HttpClientUtilOld.sendGetSSLRequest(url1 ,"UTF-8");
            System.out.println(res);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        class GetThread extends Thread {

            private final CloseableHttpClient httpClient;
            private final HttpContext context;
            private final HttpGet httpget;

            public GetThread(CloseableHttpClient httpClient, HttpGet httpget) {
                this.httpClient = httpClient;
                this.context = HttpClientContext.create();
                this.httpget = httpget;
            }

            @Override
            public void run() {
                try {
                    CloseableHttpResponse response = httpClient.execute(
                            httpget, context);
                    try {
                        HttpEntity entity = response.getEntity();
                    } finally {
                        response.close();
                    }
                } catch (ClientProtocolException ex) {
                    // Handle protocol errors
                } catch (IOException ex) {
                    // Handle I/O errors
                }
            }

        }

        class HttpClientTestThread extends Thread {

            private com.wangzz.net.http.HttpTest.PaymentOrderDTO dto;

            public HttpClientTestThread(com.wangzz.net.http.HttpTest.PaymentOrderDTO dto) {
                this.dto = dto;
            }

            public int nextInt(final int startInclusive, final int endExclusive) {
                if (startInclusive == endExclusive) {
                    return startInclusive;
                }
                Random RANDOM = new Random();

                return startInclusive + RANDOM.nextInt(endExclusive - startInclusive);
            }

            @Override
            public void run() {
                try {
                    String callFlow = LocalDate.now().toString().replace("-", "") + System.nanoTime() + String.format("%04d", nextInt(0, 9999));
                    ;
                    //String url = "http://localhost:8083/pay/api/sendPayment?"+ "sceneId=10000212&providerId=10050021&paymentMode=2&bankName=兴业银行&custAccount="+dto.getCustAccount()+"&accountName="+dto.getAccountName()+"&paymentAmount=1&flowStatus=true&certType=1&certNo="+dto.getCertNo()+"&callFlow="+callFlow;
                    String url = "http://localhost:8083/pay/api/sendPayment?" + "sceneId=10000212&providerId=10050021&paymentMode=1&bankName=平安银行&custAccount=" + dto.getCustAccount() + "&accountName=" + dto.getAccountName() + "&paymentAmount=1&flowStatus=true&contractId=" + dto.getContractId() + "&effectStartDate=2019-09-23&effectEndDate=2020-10-23&callFlow=" + callFlow;
                    String url1 = "http://localhost:8083/pay/api/sendPayment?" + "sceneId=10000210&providerId=10050007&paymentMode=1&bankName=平安银行股份有限公司上海九江路支行&custAccount=123455555&accountName=平安银行测试2222&paymentAmount=1&flowStatus=true&bankCode=307290023031&callFlow=" + callFlow;
                    String res = HttpClientUtilOld.sendPostSSLRequest(url, null, "UTF-8", "application/x-www-form-urlencoded");
                    System.out.println(res);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

        }


        @Data
        class PaymentOrderDTO implements Serializable {
            /**必填     唯一支付指令流水(上游流水号、订单号)*/
            private String callFlow;
            /**必填   外部系统订单号   */
            private String outOrderNo;
            /**必填  支付方式 1:代付(放款)，2:代收(回款)*/
            private Integer paymentMode;
            /**必填  申请单号、贷款编号   */
            private Long applyId;
            /**必填  场景ID*/
            private Integer sceneId;
            /**必填  资金(信托项目)ID*/
            private Integer fundsId;
            /**必填  资金来源(方)ID*/
            private Integer providerId;
            /**必填  产品ID */
            private Integer productId;
            /**必填  商户编号、供应商id*/
            private String merchantNo;
            /**必填  证件类型: 1身份证、2签证、3护照、4户口本、5港澳通行证、7党员证、6军人证、7团员证、8居住证*/
            private Integer certType;
            /**可选  证件号码  */
            private String certNo;
            /**必填  客户账户名称 */
            private String accountName;
            /**可选  客户账户，银行卡或第三方账号 */
            private String custAccount;
            /**必填 手机号  */
            private String mobile;
            /**必填 流程状态，是否请求第三方。1需要调用第三方支付，0:不用调用第三方，先有第三方结果，反向生成支付数据 */
            private Boolean flowStatus;
            /**可选  银行名称 */
            private String bankName;
            /**可选  银行编码 */
            private String bankCode;
            /**必填  订单日期(下单时间) yyyy-MM-dd HH:mm:ss */
            private String orderDate;
            /**必填  付款(扣款)金额*/
            private BigDecimal paymentAmount;
            /**可选   第三方支付回调时间，支付时间 yyyy-MM-dd HH:mm:ss*/
            private String paymentTime;
            /**可选  支付状态 0等待处理 1支付中 2支付成功 3支付失败 */
            private Integer paymentStatus;
            /**必填  房互网--国投-宝付用户签约协议号 */
            private String protocolNo;
            /**必填  房互网-国投-宝付用户id */
            private String userId;
            /**可选  兴业银行-期数 */
            private Integer term;
            /**必填  对公对私标志- 账务推送: 2-对公  1-对私*/
            private Integer pubOrpriFlag;
            /**托管户直放-必填  合同编号 */
            private String contractId;
            /**生效开始日 yyyy-MM-dd*/
            private String effectStartDate;
            /**生效结束日 yyyy-MM-dd*/
            private String effectEndDate;
        }

    private void createName() {
        int i = 1;
        while (true) {
            String url = "https://hanyu.baidu.com/hanyu/ajax/search_list?wd=%E5%B8%A6%E5%A5%B3&device=pc&from=home&userid=238816338&pn=" + (++i) +"&_=1555914238360";
            String charset = "UTF-8";
            String mimeType = "application/x-www-form-urlencoded";
            List<BasicNameValuePair> pairList = new ArrayList<>();
//            pairList.add(new BasicNameValuePair("wd", "带女"));
//            pairList.add(new BasicNameValuePair("device", "pc"));
//            pairList.add(new BasicNameValuePair("from", "home"));
//            pairList.add(new BasicNameValuePair("userid", "238816338"));
//            pairList.add(new BasicNameValuePair("pn", String.valueOf(i++)));
//            pairList.add(new BasicNameValuePair("_", "1555914238359"));

            List<Header> headersList = new ArrayList<>();
            headersList.add(new BasicHeader("Cookie", "BIDUPSID=E4E3F546D8DFE526F9CE0CB7D0E4BF40; PSTM=1554272179; BAIDUID=9AFAA641F6E3FB26AB382AD7B79ABA7C:FG=1; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BDUSS=jRpeTV2T0dtSFhjSGZGQlJkYUFSa01EQXFlSmVFa1p6dmxDSk9kRmJNTkxiTjljRVFBQUFBJCQAAAAAAAAAAAEAAABSDDwO1vHJyNHauuzR1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEvft1xL37dcM; PSINO=2; locale=zh; ZD_ENTRY=baidu; H_PS_PSSID=1458_21123_28723_28558_28836_28584_26350_28603; delPer=1; Hm_lvt_010e9ef9290225e88b64ebf20166c8c4=1555483336,1555483969,1555485589,1555659482; Hm_lpvt_010e9ef9290225e88b64ebf20166c8c4=1555659897"));
            headersList.add(new BasicHeader("Referer", "https://hanyu.baidu.com/s?wd=%E4%BA%94%E8%A1%8C%E5%B1%9E%E6%B0%B4%E7%9A%84%E5%AD%97&from=poem"));
            headersList.add(new BasicHeader("Host", "hanyu.baidu.com"));
            headersList.add(new BasicHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            headersList.add(new BasicHeader("Accept-Encoding", "gzip, deflate, br"));
            headersList.add(new BasicHeader("Accept-Language", "zh-CN,zh;q=0.9"));
            headersList.add(new BasicHeader("Connection", "keep-alive"));
            headersList.add(new BasicHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"));
            headersList.add(new BasicHeader("X-Requested-With", "zh-CN,zh;q=0.9"));
            Header[] headers = new Header[headersList.size()];
            String baiduWx = HttpClientUtil.sendPostSSLRequest(url, headersList.toArray(headers),pairList, charset, mimeType);
            JSONArray retArray = JSON.parseObject(baiduWx).getJSONArray("ret_array");

            retArray.forEach((j) -> {
                String name = "子"+((JSONObject)j).get("name").toString().charAt(2);
            });
        }
        //System.out.println(retArray);
    }
}
